/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "Pointer.h"

jclass pointerClass = 0;
jclass getPointerClass(JNIEnv *jenv) {
	if(!pointerClass) {
		pointerClass = (jclass)jenv->NewGlobalRef(jenv->FindClass("jouvieje/bass/utils/Pointer"));
	}
	return pointerClass;
}
jmethodID newPointerID = 0;
jmethodID getNewPointerID(JNIEnv *jenv) {
	if(!newPointerID) {
		newPointerID = jenv->GetStaticMethodID(getPointerClass(jenv), "newPointer", "(J)Ljouvieje/bass/utils/Pointer;");
	}
	return newPointerID;
}
jfieldID addressId = 0;
jfieldID getFieldID(JNIEnv *jenv) {
	if(!addressId) {
		addressId = jenv->GetFieldID(getPointerClass(jenv), "pointer", "J");
	}
	return addressId;
}

jobject newPointer(JNIEnv *jenv, jlong address) {
	jobject result = jenv->CallStaticObjectMethod(getPointerClass(jenv), getNewPointerID(jenv), address);
	return result;
}

jlong getPointerAddress(JNIEnv *jenv, jobject obj) {
	if(obj) {
		return jenv->GetLongField(obj, getFieldID(jenv));
	}
	else {
		return 0;
	}
}

void setPointerAddress(JNIEnv *jenv, jobject obj, jlong newAddress) {
	if(obj) {
		jenv->SetLongField(obj, getFieldID(jenv), newAddress);
	}
}

